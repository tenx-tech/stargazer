{"version":3,"sources":["app/util.tsx","app/App.tsx","serviceWorker.ts","index.tsx","tenx_logo.png"],"names":["processScreenshotsData","iosData","androidData","data","photos","length","console","warn","Error","placeholderDimensions","getPlaceholderDimensions","Data","Map","_iosData$data","os","width","height","forEach","_ref","name","screenshot","set","Object","defineProperty","react_default","a","createElement","alt","src","className","_androidData$data","_ref2","entry","get","ios","util_Placeholder","Array","from","entries","map","_ref3","_ref4","slicedToArray","_ref4$","android","Placeholder","_ref5","style","err","isDesktop","window","innerWidth","_default","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","renderScreenNamesList","state","names","filter","toLowerCase","includes","search","key","onClick","scroll","renderScreenshotsItem","DESKTOP","desktop","ref","assignRef","margin","flexDirection","clearSearch","setState","handleSearch","event","currentTarget","value","ReactDOM","findDOMNode","scrollIntoView","behavior","block","concat","updateWindowDimensions","fetchScreenshotsData","asyncToGenerator","regenerator_default","mark","_callee","processedData","wrap","_context","prev","next","fetchData","sent","loading","dates","timestamp","log","setErrorState","stop","_callee2","source","result","json","_context2","fetch","process","headers","pragma","cache-control","abrupt","t0","_x","apply","arguments","error","addEventListener","_this2","logo","Date","toDateString","autoFocus","placeholder","onChange","paddingLeft","removeEventListener","Component","Boolean","location","hostname","match","render","App_default","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"wRAsCaA,EAAyB,SACpCC,EACAC,GAcA,GAZuC,IAAnCA,EAAYC,KAAKC,OAAOC,QAC1BC,QAAQC,KAAR,+HAKiC,IAA/BN,EAAQE,KAAKC,OAAOC,QACtBC,QAAQC,KAAR,2HAM+B,IAA/BN,EAAQE,KAAKC,OAAOC,QACe,IAAnCH,EAAYC,KAAKC,OAAOC,OAExB,MAAM,IAAIG,MAAM,yBAGlB,IAAMC,EAAwBC,EAAyBT,EAASC,GAE1DS,EAAO,IAAIC,IAYjBC,EAIwCZ,EAAQE,KAAtCW,EAJVD,EAIUC,GAAIC,EAJdF,EAIcE,MAAOC,EAJrBH,EAIqBG,OAJrBH,EAI6BT,OAEpBa,QAAQ,SAAAC,GAAqC,IAAlCC,EAAkCD,EAAlCC,KAAMC,EAA4BF,EAA5BE,WACtBT,EAAKU,IAAIF,EAATG,OAAAC,EAAA,EAAAD,CAAA,GACGR,EACCU,EAAAC,EAAAC,cAAA,OACEV,OArDS,IAqDDA,EACRD,MAtDS,IAsDFA,EACPY,IAAKR,EACLS,IAAKR,EACLS,UAAU,oBAOpB,IAAAC,EAIwC5B,EAAYC,KAA1CW,EAJVgB,EAIUhB,GAAIC,EAJde,EAIcf,MAAOC,EAJrBc,EAIqBd,OA4BrB,OAhCAc,EAI6B1B,OAEpBa,QAAQ,SAAAc,GAAqC,IAAlCZ,EAAkCY,EAAlCZ,KAAMC,EAA4BW,EAA5BX,WAChBY,EAAQrB,EAAKsB,IAAId,GACvBR,EAAKU,IAAIF,EAATG,OAAAC,EAAA,EAAAD,CAAA,CACEY,IAAMF,GAASA,EAAME,KACnBV,EAAAC,EAAAC,cAACS,EAAD,CACEnB,OA3ES,IA2EDP,EAAsBO,OAC9BD,MA5ES,IA4EFN,EAAsBM,SAGhCD,EACCU,EAAAC,EAAAC,cAAA,OACEV,OAjFS,IAiFDA,EACRD,MAlFS,IAkFFA,EACPY,IAAKR,EACLS,IAAKR,EACLS,UAAU,oBAWbO,MAAMC,KAAK1B,EAAK2B,WAAWC,IAAI,SAAAC,GAA8B,IAAAC,EAAAnB,OAAAoB,EAAA,EAAApB,CAAAkB,EAAA,GAA5BrB,EAA4BsB,EAAA,GAAAE,EAAAF,EAAA,GAclE,MAb+B,CAC7BtB,OACAhB,KAAM,CACJ+B,IAJ8DS,EAApBT,IAK1CU,QAL8DD,EAAfC,SAM7CpB,EAAAC,EAAAC,cAACS,EAAD,CACEnB,OAvGS,IAuGDP,EAAsBO,OAC9BD,MAxGS,IAwGFN,EAAsBM,aAcnC8B,EAAc,SAAAC,GAAA,IAAG9B,EAAH8B,EAAG9B,OAAQD,EAAX+B,EAAW/B,MAAX,OAClBS,EAAAC,EAAAC,cAAA,OACEG,UAAU,cACVkB,MAAO,CACL/B,OA1He,IA0HPA,EACRD,MA3He,IA2HRA,IAGTS,EAAAC,EAAAC,cAAA,KAAGG,UAAU,mBAAb,kBAOEnB,EAA2B,SAC/BwB,EACAU,GAEA,IACE,MAAO,CACL5B,OAAQkB,EAAI/B,KAAKa,OACjBD,MAAOmB,EAAI/B,KAAKY,OAElB,MAAOiC,GACP,MAAO,CACLhC,OAAQ4B,EAAQzC,KAAKa,OACrBD,MAAO6B,EAAQzC,KAAKY,SCnJpBkC,EAAY,kBAAMC,OAAOC,WAAa,mBAO1C,SAAAC,EAAYC,GAAW,IAAAC,EAAA,OAAAhC,OAAAiC,EAAA,EAAAjC,CAAAkC,KAAAJ,IACrBE,EAAAhC,OAAAmC,EAAA,EAAAnC,CAAAkC,KAAAlC,OAAAoC,EAAA,EAAApC,CAAA8B,GAAAO,KAAAH,KAAMH,KAiFRO,sBAAwB,WACtB,OAAON,EAAKO,MAAMC,MACfC,OAAO,SAAA5C,GAAI,OACVA,EAAK6C,cAAcC,SAASX,EAAKO,MAAMK,OAAOF,iBAE/CzB,IAAI,SAAApB,GACH,OACEK,EAAAC,EAAAC,cAAA,KACEyC,IAAKhD,EACLU,UAAU,mBACVuC,QAAS,kBAAMd,EAAKe,OAAOlD,KAE1BA,MA9FYmC,EAoGvBgB,sBAAwB,SAAApD,GAAoC,IAAjCC,EAAiCD,EAAjCC,KAAMhB,EAA2Be,EAA3Bf,KACvB+B,EAAiB/B,EAAjB+B,IAAKU,EAAYzC,EAAZyC,QACP2B,EAAUjB,EAAKO,MAAMW,QAC3B,OACEhD,EAAAC,EAAAC,cAAA,OACEyC,IAAKhD,EACLU,UAAU,aACV4C,IAAK,SAAAA,GAAG,OAAInB,EAAKoB,UAAUvD,EAAMsD,KAEjCjD,EAAAC,EAAAC,cAAA,KAAGG,UAAU,kBAAkBV,GAC/BK,EAAAC,EAAAC,cAAA,OACEG,UAAU,kBACVkB,MAAO,CACL4B,OAAQ,OACR5D,MAAOwD,EAAU,OAAS,OAC1BK,cAAeL,EAAU,MAAQ,WAGnC/C,EAAAC,EAAAC,cAAA,OAAKG,UAAU,UACbL,EAAAC,EAAAC,cAAA,KAAGG,UAAU,eAAb,OACCK,GAEHV,EAAAC,EAAAC,cAAA,OAAKG,UAAU,UACbL,EAAAC,EAAAC,cAAA,KAAGG,UAAU,eAAb,WACCe,MA5HYU,EAmIvBuB,YAAc,WACZvB,EAAKwB,SAAS,CAAEZ,OAAQ,MApIHZ,EAuIvByB,aAAe,SAACC,GACd1B,EAAKwB,SAAS,CAAEZ,OAAQc,EAAMC,cAAcC,SAxIvB5B,EA2IvBoB,UAAY,SAACvD,EAAcsD,GAGzBnB,EAAKnC,GAAQsD,GA9IQnB,EAiJvBe,OAAS,SAAClD,GACR,IAEEgE,IAASC,YAAY9B,EAAKnC,IAAOkE,eAAe,CAC9CC,SAAU,UACVC,MAAO,UAET,MAAOvC,GACP1C,QAAQC,KAAR,kDAAAiF,OACoDrE,EADpD,qBAzJmBmC,EA+JvBmC,uBAAyB,WACvBnC,EAAKwB,SAAS,CAAEN,QAASvB,OAhKJK,EAmKvBoC,qBAnKuBpE,OAAAqE,EAAA,EAAArE,CAAAsE,EAAAnE,EAAAoE,KAmKA,SAAAC,IAAA,IAAA7F,EAAAC,EAAA6F,EAAA,OAAAH,EAAAnE,EAAAuE,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACC7C,EAAK8C,UAAU,OADhB,cACfnG,EADegG,EAAAI,KAAAJ,EAAAE,KAAA,EAEK7C,EAAK8C,UAAU,WAFpB,OAEflG,EAFe+F,EAAAI,KAIjBpG,GAAWC,GACP6F,EAAgB/F,EAAuBC,EAASC,GACtDoD,EAAKwB,SAAS,CACZwB,SAAS,EACTnG,KAAM4F,EACNQ,MAAO,CACLrE,IAAKjC,EAAQuG,UACb5D,QAAS1C,EAAYsG,WAEvB1C,MAAOiC,EAAcxD,IAAI,SAAAE,GAAA,OAAAA,EAAGtB,WAG9Bb,QAAQmG,IAAI,oDACZnD,EAAKoD,iBAjBc,wBAAAT,EAAAU,SAAAb,MAnKAxC,EAwLvB8C,UAxLuB,eAAAtD,EAAAxB,OAAAqE,EAAA,EAAArE,CAAAsE,EAAAnE,EAAAoE,KAwLX,SAAAe,EACVC,GADU,IAAAC,EAAAC,EAAA,OAAAnB,EAAAnE,EAAAuE,KAAA,SAAAgB,GAAA,cAAAA,EAAAd,KAAAc,EAAAb,MAAA,cAAAa,EAAAd,KAAA,EAAAc,EAAAb,KAAA,EAIac,MAAK,GAAAzB,OACrB0B,IADqB,KAAA1B,OACKqB,EADL,cAExB,CACEM,QAAS,CACPC,OAAQ,WACRC,gBAAiB,cATf,cAIFP,EAJEE,EAAAX,KAAAW,EAAAb,KAAA,EAa4BW,EAAOC,OAbnC,cAaFA,EAbEC,EAAAX,KAAAW,EAAAM,OAAA,SAcDP,GAdC,QAAAC,EAAAd,KAAA,GAAAc,EAAAO,GAAAP,EAAA,SAgBR1G,QAAQmG,IAAR,uDAAAjB,OACyDqB,IAEzDvD,EAAKoD,gBAnBG,yBAAAM,EAAAL,SAAAC,EAAA,kBAxLW,gBAAAY,GAAA,OAAA1E,EAAA2E,MAAAjE,KAAAkE,YAAA,GAAApE,EAmNvBoD,cAAgB,WACdpD,EAAKwB,SAAS,CACZ6C,OAAO,EACPrB,SAAS,KAnNXhD,EAAKO,MAAQ,CACX0C,MAAO,CACLrE,IAAK,GACLU,QAAS,IAEXsB,OAAQ,GACR/D,KAAM,GACN2D,MAAO,GACP6D,OAAO,EACPrB,SAAS,EACT9B,QAASvB,KAbUK,2LAkBrBJ,OAAO0E,iBAAiB,SAAUpE,KAAKiC,wBAEvCjC,KAAKkC,0JAGsB,IAAAmC,EAAArE,KAC3B,GAAIA,KAAKK,MAAMyC,QACb,OAAO,KACF,GAAI9C,KAAKK,MAAM8D,MAEpB,OADArH,QAAQmG,IAAI,6BACL,KAGT,IAAMlC,EAAUf,KAAKK,MAAMW,QAC3B,OACEhD,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAAA,UAAQG,UAAU,aAChBL,EAAAC,EAAAC,cAAA,OAAKE,IAAKkG,IAAMjG,UAAU,UAAUF,IAAI,SACxCH,EAAAC,EAAAC,cAAA,KAAGG,UAAU,eAAb,gCAED0C,GACC/C,EAAAC,EAAAC,cAAA,OAAKG,UAAU,kBACbL,EAAAC,EAAAC,cAAA,0BACiB,IACfF,EAAAC,EAAAC,cAAA,SAAI,IAAIqG,KAAKvE,KAAKK,MAAM0C,MAAMrE,KAAK8F,gBAFrC,KAIAxG,EAAAC,EAAAC,cAAA,8BACqB,IACnBF,EAAAC,EAAAC,cAAA,SAAI,IAAIqG,KAAKvE,KAAKK,MAAM0C,MAAM3D,SAASoF,gBAFzC,MAMHzD,GACC/C,EAAAC,EAAAC,cAAA,OAAKG,UAAU,WACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,aACbL,EAAAC,EAAAC,cAAA,SACEuG,WAAS,EACTC,YAAW,WAAA1C,OAAahC,KAAKK,MAAM1D,KAAKE,OAA7B,mBACXwB,UAAU,cACVqD,MAAO1B,KAAKK,MAAMK,OAClBiE,SAAU3E,KAAKuB,eAEhBvB,KAAKK,MAAMK,QACV1C,EAAAC,EAAAC,cAAA,KAAGG,UAAU,cAAcuC,QAASZ,KAAKqB,aAAzC,MAKJrD,EAAAC,EAAAC,cAAA,OAAKG,UAAU,aAAa2B,KAAKI,0BAGrCpC,EAAAC,EAAAC,cAAA,OACEG,UAAU,sBACVkB,MAAO,CAAEqF,YAAa7D,EAAU,IAAM,IAErCf,KAAKK,MAAM1D,KAAKoC,IAAI,SAAApC,GAEnB,OAAO0H,EAAKvD,sBAAsBnE,sDAqI1C+C,OAAOmF,oBAAoB,SAAU7E,KAAKiC,+BAjNjB6C,mBCxBTC,QACW,cAA7BrF,OAAOsF,SAASC,UAEe,UAA7BvF,OAAOsF,SAASC,UAEhBvF,OAAOsF,SAASC,SAASC,MACvB,2DCZNvD,IAASwD,OAAOnH,EAAAC,EAAAC,cAACkH,EAAD,MAASC,SAASC,eAAe,SDuI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCE/InBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.a99ae320.chunk.js","sourcesContent":["import React from \"react\";\n\n/* =============================================================================\nTypes and Config\n============================================================================= */\n\ninterface PhotoData {\n  name: string;\n  screenshot: string;\n}\n\nexport interface ScreenshotsData {\n  data: {\n    width: number;\n    height: number;\n    os: string;\n    photos: ReadonlyArray<PhotoData>;\n  };\n  timestamp: string;\n}\n\nexport interface ScreenshotItem {\n  name: string;\n  data: {\n    ios: any;\n    android: any;\n  };\n}\n\n/**\n * Resize images to 75%.\n */\nconst IMAGE_RESIZE = 0.75;\n\n/* =============================================================================\nScreenshot Processing Methods\n============================================================================= */\n\nexport const processScreenshotsData = (\n  iosData: ScreenshotsData,\n  androidData: ScreenshotsData,\n): ReadonlyArray<ScreenshotItem> => {\n  if (androidData.data.photos.length === 0) {\n    console.warn(\n      `Found zero photos in the Android screenshots data, did you run the Stargazer tool first to record screenshots for your app?`,\n    );\n  }\n\n  if (iosData.data.photos.length === 0) {\n    console.warn(\n      `Found zero photos in the iOS screenshots data, did you run the Stargazer tool first to record screenshots for your app?`,\n    );\n  }\n\n  if (\n    iosData.data.photos.length === 0 &&\n    androidData.data.photos.length === 0\n  ) {\n    throw new Error(\"No photo data exists!\");\n  }\n\n  const placeholderDimensions = getPlaceholderDimensions(iosData, androidData);\n\n  const Data = new Map();\n\n  /**\n   * Some imperative code... this could surely be more elegant\n   * but... hey it's good for now.\n   *\n   * Combine iOS and Android image data into one array which can\n   * be mapped over to render the same screens side-by-side, with\n   * some extra logic to avoid failing in the case that both\n   * screenshots do not exist yet.\n   */\n\n  {\n    /**\n     * Map iOS Screenshots.\n     */\n    const { os, width, height, photos } = iosData.data;\n\n    photos.forEach(({ name, screenshot }: PhotoData) => {\n      Data.set(name, {\n        [os]: (\n          <img\n            height={height * IMAGE_RESIZE}\n            width={width * IMAGE_RESIZE}\n            alt={name}\n            src={screenshot}\n            className=\"ScreenImage\"\n          />\n        ),\n      });\n    });\n  }\n\n  {\n    /**\n     * Map Android Screenshots.\n     */\n    const { os, width, height, photos } = androidData.data;\n\n    photos.forEach(({ name, screenshot }: PhotoData) => {\n      const entry = Data.get(name);\n      Data.set(name, {\n        ios: (entry && entry.ios) || (\n          <Placeholder\n            height={placeholderDimensions.height * IMAGE_RESIZE}\n            width={placeholderDimensions.width * IMAGE_RESIZE}\n          />\n        ),\n        [os]: (\n          <img\n            height={height * IMAGE_RESIZE}\n            width={width * IMAGE_RESIZE}\n            alt={name}\n            src={screenshot}\n            className=\"ScreenImage\"\n          />\n        ),\n      });\n    });\n  }\n\n  /**\n   * Convert to an array and add placeholders for any missing\n   * Android screenshots.\n   */\n  return Array.from(Data.entries()).map(([name, { ios, android }]) => {\n    const result: ScreenshotItem = {\n      name,\n      data: {\n        ios,\n        android: android || (\n          <Placeholder\n            height={placeholderDimensions.height * IMAGE_RESIZE}\n            width={placeholderDimensions.width * IMAGE_RESIZE}\n          />\n        ),\n      },\n    };\n\n    return result;\n  });\n};\n\n/* =============================================================================\nHelper UI\n============================================================================= */\n\nconst Placeholder = ({ height, width }: { height: number; width: number }) => (\n  <div\n    className=\"Placeholder\"\n    style={{\n      height: height * IMAGE_RESIZE,\n      width: width * IMAGE_RESIZE,\n    }}\n  >\n    <p className=\"PlaceholderText\">No Image Yet</p>\n  </div>\n);\n\n/**\n * Get whichever dimensions exists. One of them will exist.\n */\nconst getPlaceholderDimensions = (\n  ios: ScreenshotsData,\n  android: ScreenshotsData,\n) => {\n  try {\n    return {\n      height: ios.data.height,\n      width: ios.data.width,\n    };\n  } catch (err) {\n    return {\n      height: android.data.height,\n      width: android.data.width,\n    };\n  }\n};\n","import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport logo from \"../tenx_logo.png\";\nimport {\n  processScreenshotsData,\n  ScreenshotItem,\n  ScreenshotsData,\n} from \"./util\";\n\n/* =============================================================================\nTypes and Config\n============================================================================= */\n\ninterface IState {\n  error: boolean;\n  loading: boolean;\n  search: string;\n  desktop: boolean;\n  names: ReadonlyArray<string>;\n  data: ReadonlyArray<ScreenshotItem>;\n  dates: {\n    ios: string;\n    android: string;\n  };\n}\n\n/**\n * Adjust for smaller screens\n */\nconst isDesktop = () => window.innerWidth > 975;\n\n/* =============================================================================\nApp Component\n============================================================================= */\n\nexport default class extends Component<{}, IState> {\n  constructor(props: {}) {\n    super(props);\n\n    this.state = {\n      dates: {\n        ios: \"\",\n        android: \"\",\n      },\n      search: \"\",\n      data: [],\n      names: [],\n      error: false,\n      loading: true,\n      desktop: isDesktop(),\n    };\n  }\n\n  async componentDidMount(): Promise<void> {\n    window.addEventListener(\"resize\", this.updateWindowDimensions);\n\n    this.fetchScreenshotsData();\n  }\n\n  render(): JSX.Element | null {\n    if (this.state.loading) {\n      return null;\n    } else if (this.state.error) {\n      console.log(\"TODO: Handle error state!\");\n      return null;\n    }\n\n    const DESKTOP = this.state.desktop;\n    return (\n      <div className=\"App\">\n        <header className=\"AppHeader\">\n          <img src={logo} className=\"AppLogo\" alt=\"logo\" />\n          <p className=\"HeaderTitle\">Stargazer UI Testing System</p>\n        </header>\n        {DESKTOP && (\n          <div className=\"TimestampBlock\">\n            <p>\n              iOS updated on{\" \"}\n              <b>{new Date(this.state.dates.ios).toDateString()}</b>.\n            </p>\n            <p>\n              Android updated on{\" \"}\n              <b>{new Date(this.state.dates.android).toDateString()}</b>.\n            </p>\n          </div>\n        )}\n        {DESKTOP && (\n          <div className=\"SideBar\">\n            <div className=\"SearchBar\">\n              <input\n                autoFocus\n                placeholder={`Filter (${this.state.data.length} total screens)`}\n                className=\"SearchInput\"\n                value={this.state.search}\n                onChange={this.handleSearch}\n              />\n              {this.state.search && (\n                <p className=\"ClearSearch\" onClick={this.clearSearch}>\n                  x\n                </p>\n              )}\n            </div>\n            <div className=\"NamesList\">{this.renderScreenNamesList()}</div>\n          </div>\n        )}\n        <div\n          className=\"ScreenshotContainer\"\n          style={{ paddingLeft: DESKTOP ? 300 : 0 }}\n        >\n          {this.state.data.map(data => {\n            // @ts-ignore\n            return this.renderScreenshotsItem(data);\n          })}\n        </div>\n      </div>\n    );\n  }\n\n  renderScreenNamesList = () => {\n    return this.state.names\n      .filter(name =>\n        name.toLowerCase().includes(this.state.search.toLowerCase()),\n      )\n      .map(name => {\n        return (\n          <p\n            key={name}\n            className=\"ScreenNameOption\"\n            onClick={() => this.scroll(name)}\n          >\n            {name}\n          </p>\n        );\n      });\n  };\n\n  renderScreenshotsItem = ({ name, data }: ScreenshotItem) => {\n    const { ios, android } = data;\n    const DESKTOP = this.state.desktop;\n    return (\n      <div\n        key={name}\n        className=\"Screenshot\"\n        ref={ref => this.assignRef(name, ref)}\n      >\n        <p className=\"ScreenshotName\">{name}</p>\n        <div\n          className=\"DeviceContainer\"\n          style={{\n            margin: \"auto\",\n            width: DESKTOP ? \"68vw\" : \"auto\",\n            flexDirection: DESKTOP ? \"row\" : \"column\",\n          }}\n        >\n          <div className=\"Device\">\n            <p className=\"DeviceTitle\">iOS</p>\n            {ios}\n          </div>\n          <div className=\"Device\">\n            <p className=\"DeviceTitle\">Android</p>\n            {android}\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  clearSearch = () => {\n    this.setState({ search: \"\" });\n  };\n\n  handleSearch = (event: React.FormEvent<HTMLInputElement>) => {\n    this.setState({ search: event.currentTarget.value });\n  };\n\n  assignRef = (name: string, ref: any) => {\n    // @ts-ignore\n    // tslint:disable-next-line\n    this[name] = ref;\n  };\n\n  scroll = (name: string) => {\n    try {\n      // @ts-ignore\n      ReactDOM.findDOMNode(this[name]).scrollIntoView({\n        behavior: \"instant\",\n        block: \"start\",\n      });\n    } catch (err) {\n      console.warn(\n        `Tried to find and scroll to DOM node using ref ${name} but failed...`,\n      );\n    }\n  };\n\n  updateWindowDimensions = () => {\n    this.setState({ desktop: isDesktop() });\n  };\n\n  fetchScreenshotsData = async () => {\n    const iosData = await this.fetchData(\"ios\");\n    const androidData = await this.fetchData(\"android\");\n\n    if (iosData && androidData) {\n      const processedData = processScreenshotsData(iosData, androidData);\n      this.setState({\n        loading: false,\n        data: processedData,\n        dates: {\n          ios: iosData.timestamp,\n          android: androidData.timestamp,\n        },\n        names: processedData.map(({ name }) => name),\n      });\n    } else {\n      console.log(\"Error fetching iOS and Android screenshots data!\");\n      this.setErrorState();\n    }\n  };\n\n  fetchData = async (\n    source: \"ios\" | \"android\",\n  ): Promise<ScreenshotsData | void> => {\n    try {\n      const result = await fetch(\n        `${process.env.PUBLIC_URL}/${source}-data.json`,\n        {\n          headers: {\n            pragma: \"no-cache\",\n            \"cache-control\": \"no-cache\",\n          },\n        },\n      );\n      const json: ScreenshotsData = await result.json();\n      return json;\n    } catch (err) {\n      console.log(\n        `Could not fetch screenshots source JSON for device: ${source}`,\n      );\n      this.setErrorState();\n    }\n  };\n\n  componentWillUnmount(): void {\n    window.removeEventListener(\"resize\", this.updateWindowDimensions);\n  }\n\n  setErrorState = () => {\n    this.setState({\n      error: true,\n      loading: false,\n    });\n  };\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ninterface Config {\n  readonly onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  readonly onUpdate?: (registration: ServiceWorkerRegistration) => void;\n}\n\nexport function register(config?: Config): void {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as {\n        readonly env: { readonly [key: string]: string };\n      }).env.PUBLIC_URL,\n      window.location.href,\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\",\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config): void {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      // tslint:disable-next-line\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker === null) {\n          return;\n        }\n        // tslint:disable-next-line\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\",\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config): void {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType !== null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      );\n    });\n}\n\nexport function unregister(): void {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./app/App\";\nimport \"./app/index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nimport * as serviceWorker from \"./serviceWorker\";\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/tenx_logo.318b87d0.png\";"],"sourceRoot":""}